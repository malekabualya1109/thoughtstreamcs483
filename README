Malek Abualya
malekabualya@gmail.com

ThoughtStream Part 2: Authentication & Authorization

1. Overview

In Part 2 of the ThoughtStream project, the backend was extended to include secure user authentication and authorization using Google OAuth 2.0. Users must be authenticated to access any diary features. We implemented session-based login using passport.js and the passport-google-oauth20 strategy. Sessions are managed using express-session, and authenticated users are tracked with cookies. Diary routes are now protected and scoped to the logged-in user.

2. Google Cloud Console Workflow

To enable Google login:
- Created a new project in Google Cloud Console
- Enabled the Google People API
- Set up the OAuth consent screen (External)
- Added test user (my Gmail)
- Created OAuth 2.0 credentials (Web application)
  - Authorized redirect URI: http://localhost:5000/auth/google/callback
- Copied the generated Client ID and Secret to the .env file

OAuth 2.0 allows secure authorization by letting users log in using Google credentials, without sharing passwords.

3. Authentication Flow Description

1. User visits /auth/google and is redirected to Google’s consent screen
2. After login, Google redirects to /auth/google/callback
3. Passport handles the response and either creates or retrieves the user
4. User ID is serialized and stored in a cookie (connect.sid)
5. On future requests, the session restores the user from the cookie, making them available on req.user

4. Environment Variables

Environment variables used in the .env file:

MONGO_URI=
PORT=
WEATHER_API=
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_CALLBACK_URL=
SESSION_SECRET=

Note: Only .env.example should be submitted. Real keys should not be shared.

5. Mongoose Models and Schema Changes

Two models are used:
- User.js: stores Google user data (googleId, name, email, picture)
- DiaryEntry.js: updated to include a required user field

Example from DiaryEntry schema:

user: {
  type: mongoose.Schema.Types.ObjectId,
  ref: "User",
  required: true
}

This links each diary entry to its owner.

6. Route Protection

All diary routes are protected using ensureAuthenticated middleware. This middleware checks if the user is logged in via session (req.isAuthenticated and req.user). If not, it returns a 401 Unauthorized response.

Example route usage:

router.get("/", ensureAuthenticated, getAllEntries);

All create, update, delete, and read routes use this same protection.

7. Logout Route

Route: GET /auth/logout

This route logs the user out by calling req.logout(), destroys the session, and clears the connect.sid cookie. It returns a JSON message:

{ "message": "Logged out successfully" }

After logging out, accessing any diary route returns 401 Unauthorized.

8. Testing Strategies (Postman)

Steps to test session-based authentication:
1. Start the backend server
2. In browser, visit http://localhost:5000/auth/google and log in
3. Open browser DevTools > Application > Cookies > http://localhost:5000
4. Copy the value of the connect.sid cookie
5. In Postman, paste the cookie manually in the Headers tab:

Key: Cookie
Value: connect.sid=your-session-value

6. Send GET, POST, PUT, DELETE requests to /api/diary

If the cookie is missing or invalid, the server returns:

{ "message": "Unauthorized" }

9. Known Issues or Future Improvements

- If location input is invalid or weather API quota is exceeded, weather returns null
- Session-based auth is not optimal for frontends like React; Part 3 will implement JWT
- Postman sometimes doesn’t persist cookies; had to manually use the Cookie header
